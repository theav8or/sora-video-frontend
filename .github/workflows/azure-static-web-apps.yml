name: Azure Static Web Apps CI/CD

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

permissions:
  contents: read
  deployments: write

jobs:
  build_and_deploy_job:
    if: github.event_name == 'push' || (github.event_name == 'pull_request' && github.event.action != 'closed')
    runs-on: ubuntu-latest
    name: Build and Deploy Job
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true
          fetch-depth: 0  # Fetch all history for all branches and tags
          
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'
          check-latest: true
          
      - name: Install dependencies
        run: |
          # Print versions for debugging
          node -v
          npm -v
          
          # Install dependencies using npm install instead of ci to update lock file
          npm install --legacy-peer-deps
          
          # Verify lock file is up to date
          git status
          
      - name: Build application
        run: |
          # Build with production settings
          VITE_BASE_PATH=./ npm run build
          
          # Verify build output
          ls -la dist/
          
      - name: Create minimal build
        run: |
          # Create a fresh build directory
          rm -rf build
          mkdir -p build
          
          # Create a minimal index.html with inline CSS and JS
          echo '<!DOCTYPE html>
          <html lang="en">
          <head>
            <meta charset="UTF-8" />
            <meta name="viewport" content="width=device-width, initial-scale=1.0" />
            <title>Video Generation App</title>
            <style>
              body { font-family: Arial, sans-serif; text-align: center; padding: 2rem; }
              .loading { font-size: 1.5rem; margin-top: 2rem; }
            </style>
          </head>
          <body>
            <div id="root">
              <h1>Video Generation App</h1>
              <p class="loading">Loading application...</p>
            </div>
            <script>
              // Minimal error handling for failed asset loading
              window.addEventListener("error", (e) => {
                console.error("Error loading resource:", e);
                const root = document.getElementById('root');
                if (root) {
                  root.innerHTML = `
                    <h1>Application Error</h1>
                    <p>Failed to load application resources. Please refresh the page or try again later.</p>
                    <p>${e.message}</p>
                  `;
                }
              }, true);
            </script>
            <!-- Load main JS file -->
            <script type="module" crossorigin src="/assets/index.js"></script>
          </body>
          </html>' > build/index.html
          
          # Create assets directory
          mkdir -p build/assets
          
          # Copy only the main JS file (assuming it's the main entry point)
          MAIN_JS=$(find dist/assets -name 'main-*.js' | head -n 1)
          if [ -f "$MAIN_JS" ]; then
            cp "$MAIN_JS" build/assets/index.js
          else
            echo "Error: Could not find main JS file in dist/assets/"
            exit 1
          fi
          
          # Copy CSS if it exists
          find dist/assets -name '*.css' -exec cp {} build/assets/ \; 2>/dev/null || true
          
          # Create minimal staticwebapp.config.json
          echo '{
            "navigationFallback": {
              "rewrite": "/index.html",
              "exclude": ["/assets/*"]
            },
            "mimeTypes": {
              ".js": "text/javascript",
              ".css": "text/css"
            }
          }' > build/staticwebapp.config.json
          
          # Create _redirects file for SPA routing
          echo '/*    /index.html   200' > build/_redirects
          
          # Create a simple 404 page
          cp build/index.html build/404.html
          
          # Verify final build contents
          echo "=== Final build structure ==="
          find build -type f | sort
          
          echo "\n=== Total file count ==="
          find build -type f | wc -l
          
          echo "\n=== Build size ==="
          du -sh build/*
          
      - name: Deploy to Azure Static Web App
        uses: Azure/static-web-apps-deploy@v1
        with:
          azure_static_web_apps_api_token: 33d6a8db16d582c2e8b324002c8f494c8b8e80929511aaf085bcf4daa51e5b7f06-ac285d03-4a3a-43ec-bed2-2e295ab3752d00f28090e98e210f
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          action: 'upload'
          app_location: '/'  # Source directory for the application code
          output_location: 'build'  # Azure expects the built files in a 'build' directory
          skip_app_build: true  # We're handling the build manually
